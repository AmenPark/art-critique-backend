
    /*
    @PostMapping("/request")
    String requestFeedback(@RequestParam("image") MultipartFile imageFile, HttpServletRequest request, HttpServletResponse response) throws IOException {

        MemberEntity me = memberRepository.findByEmail(String.valueOf(request.getAttribute("email")));
        if (me.getCredit() <= 0) {
            return "noCreditError";
        }
        String serialNumber = UUID.randomUUID().toString();

        String imageUrl = commonUtil.uploadToStorage(imageFile, serialNumber);

        String jsonData = "{ \"name\": " + "\"imageUrl\"" + "}";

        try {
            FeedbackEntity pythonResponse = webClientBuilder.build()
                    .post()
                    .uri(feedbackServerHost + "/request")
                    .header("Content-Type", "application/json")
                    .bodyValue(jsonData)
                    .retrieve()
                    .bodyToMono(FeedbackEntity.class)
                    .block();

            pythonResponse.setCreatedAt(LocalDateTime.now());
            pythonResponse.setIsPublic(true);
            pythonResponse.setIsBookmarked(false);
            pythonResponse.setTail(null);
            pythonResponse.setSerialNumber(serialNumber);
            pythonResponse.setPictureUrl(imageUrl);
            feedbackRepository.save(pythonResponse);

            me.addFeedback(pythonResponse);
            me.setCredit(me.getCredit() - 1);

            memberRepository.save(me);

            return pythonResponse.getSerialNumber();
        } catch(Exception e) {
            response.setStatus(501);
            return null;
        }
    }
     */

    /*
    @GetMapping("/public/retrieve/{serialNumber}")
    RetrieveFeedbackDto retrieveFeedback(@PathVariable("serialNumber") String serialNumber, HttpServletResponse response) {
        Optional<FeedbackEntity> feedbackEntity = feedbackRepository.findBySerialNumber(serialNumber);
        if (feedbackEntity.isPresent()) {
            RetrieveFeedbackDto dto = RetrieveFeedbackDto.builder()
                    .isBookmarked(feedbackEntity.get().getIsBookmarked())
                    .version(feedbackEntity.get().getVersion())
                    .createdAt(feedbackEntity.get().getCreatedAt())
                    .pictureUrl(feedbackEntity.get().getPictureUrl())
                    .serialNumber(feedbackEntity.get().getSerialNumber())
                    .userReviewDetail(feedbackEntity.get().getUserReviewDetail())
                    .userReview(feedbackEntity.get().getUserReview())
                    .build();

            List<FeedbackResultDto> ResultDtoList = new ArrayList<>();
            for (FeedbackResultEntity e : feedbackEntity.get().getFeedbackResults()) {
                FeedbackResultDto resultDto = new FeedbackResultDto();
                resultDto.setFeedbackContent(e.getFeedbackContent());
                resultDto.setFeedbackType(e.getFeedbackType());
                resultDto.setFeedbackDisplay(e.getFeedbackDisplay());
                ResultDtoList.add(resultDto);
            }
            dto.setFeedbackResults(ResultDtoList);
            return dto;
        } else {
            System.out.println("아예 피드백이 없음");
            response.setStatus(402);
            return null;
        }
    }
     */


    /*
    @PostMapping("/remake/{serialNumber}")
    String remake(@RequestParam("image") MultipartFile imageFile,
                  @PathVariable String serialNumber,
                  HttpServletRequest request,
                  HttpServletResponse response) throws IOException {
        System.out.println(imageFile + "  이미지에 대한 재요청");
        Optional<FeedbackEntity> original = feedbackRepository.findBySerialNumber(serialNumber);
        if (original.isEmpty()) {
            response.setStatus(402);
            return null;
        }
        MemberEntity me = memberRepository.findByEmail(request.getAttribute("email").toString());
        me.removeFeedback(original.get());

        String jsonData = "{ \"name\": \"default\" }";

        FeedbackEntity pythonResponse = webClientBuilder.build()
                .post()
                .uri(feedbackServerHost + "/request")
                .header("Content-Type", "application/json")
                .bodyValue(jsonData)
                .retrieve()
                .bodyToMono(FeedbackEntity.class)
                .block();

        assert pythonResponse != null;
        pythonResponse.setCreatedAt(LocalDateTime.now());
        pythonResponse.setIsPublic(original.get().getIsPublic());
        pythonResponse.setIsBookmarked(original.get().getIsBookmarked());
        pythonResponse.setTail(original.get().getFid());
        pythonResponse.setPictureUrl(original.get().getPictureUrl());

        String sn = UUID.randomUUID().toString();
        pythonResponse.setSerialNumber(sn);

        feedbackRepository.save(pythonResponse);
        me.addFeedback(pythonResponse);
        memberRepository.save(me);

        return "null";
    }
    */



//    @GetMapping(value="/public/retrieve/{serialNumber}", produces = MediaType.TEXT_EVENT_STREAM_VALUE)
//    public SseEmitter retrieve(@PathVariable String serialNumber) {
//        SseEmitter emitter = new SseEmitter(2*60*1000L);
////        emitters.add(emitter);
//        // threadSafe 한지 아직 알 수 없음
//        // 아마 이 원리 그대로 진행 할 것 같음
//        // 프론트가 접속이 끊겨도 내부적으로 데이터베이스에 파이썬의 입력값이 들어와야함 따라서
//        // 프론트 - 스프링 / 스프링 - 파이썬 은 완전히 별개의 연결이고 파이썬과 스프링의 연결의 결과는 데이터베이스에 반영이되야하고, 스프링과 프론트의 연결은 프론트에 반영되야함
//        Executors.newSingleThreadExecutor().execute(() -> {
//            try {
//                for (int i = 0; i <= 110; i++) {
//                    Optional<FeedbackEntity> feedbackEntity = feedbackRepository.findBySerialNumber(serialNumber);
//                    emitter.send(SseEmitter.event()
//                                    .name("pending")
//                                    .data("{\"rate\":" + feedbackEntity.get().getProgressRate() + "}")
//                    );
//                    // 추후 실제 진행률만 넣도록
//                    feedbackEntity.get().setProgressRate(feedbackEntity.get().getProgressRate() + 1);
//                    feedbackRepository.save(feedbackEntity.get());
//                    TimeUnit.MILLISECONDS.sleep(1000);
//                    if (feedbackEntity.get().getState().equals("COMPLETED")) {
//                        RetrieveFeedbackDto dto = generateRetrieveFeedbackDto(feedbackEntity.get());
//                        emitter.send(SseEmitter.event()
//                                .name("completed")
//                                .data(dto)
//                        );
//                        break;
//                    } else if (feedbackEntity.get().getState().equals(FeedbackState.FAIL)) {
//                        RetrieveFeedbackDto dto = generateRetrieveFeedbackDto(feedbackEntity.get());
//
//                        emitter.send(SseEmitter.event()
//                                .name("fail")
//                                .data(dto)
//                        );
//                        break;
//                    }
//                }
//                Optional<FeedbackEntity> feedbackEntity = feedbackRepository.findBySerialNumber(serialNumber);
//                RetrieveFeedbackDto dto = generateRetrieveFeedbackDto(feedbackEntity.get());
//                emitter.send(SseEmitter.event()
//                        .name("timeout")
//                        .data(dto)
//                );
//                emitter.complete();
//            }
//            catch (Exception e) {
//            }
//        });
//        return emitter;
////        return emitterService.connection(serialNumber, response);
//    }